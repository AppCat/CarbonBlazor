@page "/modal"

<div class="component-variation">
    <h2 class="component-variation__name">Modal</h2>
    <div class="component-example">
        <div class="svg--sprite" aria-hidden="true"></div>
        <div class="component-example__live">
            <div class="component-example__live--rendered modal">

                <div>
                    <BxModal @ref="_modal" Heading="Modal heading" Label="Optional label" Id="modal-ed454ftfa4q1" @bind-Visible="@_visible" OnVisibleChange="HandleVisibleChange">
                        <ContentTemplate>
                            <p>
                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue
                                vitae
                                tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla
                                facilisi.
                                Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum.
                            </p>
                        </ContentTemplate>
                        <FooterTemplate>
                            <BxButton Kind="BxButtonKind.Secondary" Content="Secondary button" data-modal-close />
                            <BxButton Kind="BxButtonKind.Danger" Content="Primary button" />
                        </FooterTemplate>
                    </BxModal>
                    <BxButton OnClick="(() => _visible = !_visible)" Content="@_content" />
                    <BxButton OnClick="@(() => _modal?.ShowAsync())" Content="@_content" />
                    <BxButton OnClick="@(() => HandleShowModalAsync())" Content="Show Modal By Service" />
                    @*<BxLongPressButton Kind="BxButtonKind.Secondary" OnClick="@(() => HandleShowModalAsync(true))" Content="@_content" />*@
                </div>

            </div>
        </div>
    </div>
</div>

@code {
    bool _visible;
    string _content => _visible ? "Close Modal" : "Show Modal";
    BxModal _modal;

    /// <summary>
    /// 模态服务
    /// </summary>
    [Inject]
    protected BxModalService ModalService { get; set; }

    private async Task HandleShowModalAsync(bool outside = false)
    {
        var config = new BxModalConfig()
        {
            Heading = "是否删除",
            ContentTemplate = Content(),
            Actions = new BxModalActionConfig[]
                {
                new BxModalActionConfig
                {
                    Text = "Cancel",
                    OnClick = (model => { return Task.FromResult(true); })
                },
                new BxModalActionConfig
                {
                    Text = "Delete",
                    Kind = BxButtonKind.Danger,
                    OnClick = (async model => { await Task.Delay(500000); return true; })
                }
                },
            PreventCloseOnClickOutside = outside
        };
        await ModalService.ShowModalAsync(config);
        StateHasChanged();
    }

    private RenderFragment<object> Content() => cxt => __builder =>
    {
        var sequence = 0;

        for (var i = 0; i < 20; i++)
        {
            __builder.OpenElement(sequence++, "div");

            __builder.AddContent(sequence++, @"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue
        vitae
        tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla
        facilisi.
        Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum. ");

            __builder.CloseElement();
        }
    };

    private async Task HandleVisibleChange(bool visible)
    {
        Console.WriteLine(visible);
    }
}
