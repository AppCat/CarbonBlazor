@page "/modal"

<div class="component-variation">
    <h2 class="component-variation__name">Modal</h2>
    <div class="component-example">
        <div class="svg--sprite" aria-hidden="true"></div>
        <div class="component-example__live">
            <div class="component-example__live--rendered modal">

                <div>
                    <button class="bx--btn bx--btn--primary" type="button" data-modal-target="#modal-ed454ftfa4q1" @onclick="@(() => { Console.WriteLine(_visible);  _visible = true; })">Show modal1</button>
                    <BxModal Heading="Modal heading" Label="Optional label" Id="modal-ed454ftfa4q1" @bind-Visible="@_visible" Loading>
                        <ContentTemplate>
                            <p>
                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue
                                vitae
                                tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla
                                facilisi.
                                Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum.
                            </p>
                        </ContentTemplate>
                        <FooterTemplate>
                            <BxButton Kind="BxButtonKind.Secondary" Content="Secondary button" data-modal-close />
                            <BxButton Kind="BxButtonKind.Danger" Content="Primary button" />
                        </FooterTemplate>
                    </BxModal>
                    <button class="bx--btn bx--btn--primary" type="button" data-modal-target="#modal-ed454ftfa4q1" @onclick="@HandleShowModalAsync">Show modal2</button>
                    <BxLongPressButton Kind="BxButtonKind.Secondary" OnClick="@HandleShowModalAsync" Content="Show modal3"/>
                </div>

            </div>
        </div>
    </div>
</div>

@code {
    private bool _visible;

    /// <summary>
    /// 模态服务
    /// </summary>
    [Inject]
    protected BxModalService ModalService { get; set; }

    private async Task HandleShowModalAsync()
    {
        var config = new BxModalConfig()
            {
                Heading = "是否删除",
                ContentTemplate = Content(),
                Actions = new BxModalActionConfig[]
                    {
                new BxModalActionConfig
                {
                    Text = "Cancel",
                    OnClick = (model => { return Task.FromResult(true); })
                },
                new BxModalActionConfig
                {
                    Text = "Delete",
                    Kind = BxButtonKind.Danger,
                    OnClick = (async model => { await Task.Delay(500000); return true; })
                },
                    }
            };

        await ModalService.ShowModalAsync(config);
    }

    private RenderFragment<object> Content() => cxt => __builder =>
       {
       var sequence = 0;

       for (var i = 0; i < 20; i++)
       {
           __builder.OpenElement(sequence++, "div");

           __builder.AddContent(sequence++, @"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue
            vitae
            tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla
            facilisi.
            Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum. ");

           __builder.CloseElement();
       }
       };
}
