@page "/fetchdata"
@using CarbonBlazor.Demo.Models
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>


<BxDataTable TModel=Person DataSource=Persons>
    <BxColumn @bind-Field="context.Id" />
    <BxColumn @bind-Field="context.Name" />
    <BxColumn @bind-Field="context.Age" />
    <BxColumn @bind-Field="context.Sex" />
</BxDataTable>

<hr />

<BxDataTable TModel=Person DataSource=Persons WithSelection>
    <BxColumn @bind-Field="context.Id" />
    <BxColumn @bind-Field="context.Name" />
    <BxColumn @bind-Field="context.Age" />
    <BxColumn @bind-Field="context.Sex" />
</BxDataTable>

<div class="bx--form-item bx--checkbox-wrapper">
    <input id="bx--checkbox-ind" class="bx--checkbox" type="checkbox" value="new" name="checkbox" aria-checked="mixed">
    <label for="bx--checkbox-ind" class="bx--checkbox-label">Indeterminate checkbox</label>
</div>

<div class="bx--form-item bx--checkbox-wrapper">
    <input id="bx--checkbox-new" class="bx--checkbox" type="checkbox" value="new" name="checkbox" checked="" aria-checked="true">
    <label for="bx--checkbox-new" class="bx--checkbox-label">Checkbox</label>
</div>

<div class="bx--form-item bx--checkbox-wrapper">
    <input id="bx--checkbox-new" class="bx--checkbox" type="checkbox" value="new" name="checkbox" aria-checked="false">
    <label for="bx--checkbox-new" class="bx--checkbox-label">Checkbox</label>
</div>

<div class="bx--form-item bx--checkbox-wrapper">
    <input id="bx--checkbox-disabled" class="bx--checkbox" type="checkbox" value="new" name="checkbox" disabled="">
    <label for="bx--checkbox-disabled" class="bx--checkbox-label">Disabled checkbox</label>
</div>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    IEnumerable<Person> Persons { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Persons = Enumerable.Range(0, 20).Select(_ => Person.RandomCreate());
    }
}
