@page "/button"
@using CarbonBlazor.Extensions
@inherits DemoPageBase

<div style="max-width: 1000px;">
    <ComponentDemo Variants="variants" Knob="Knob" />
</div>

@code {
    private Dictionary<string, (Type type, string value, RenderFragment? renderFragment)> variants;
    BxButtonKind _kind = BxButtonKind.Primary;
    BxButtonSize _size = BxButtonSize.Md;
    bool _disabled;

    protected override void OnInitialized()
    {
        RenderFragment button(Dictionary<string, Func<object>>? attribute = null, RenderFragment? content = null) => __builder =>
        {
            var sequence = 0;

            __builder.OpenComponent(sequence++, typeof(BxButton));
            __builder.SetKey(Guid.NewGuid());
            foreach (var item in attribute ?? new Dictionary<string, Func<object>>())
            {
                __builder.AddAttribute(sequence++, item.Key, item.Value.Invoke());
            }
            __builder.AddAttribute(sequence++, nameof(BxButton.ChildContent), content);
            __builder.CloseComponent();

            var frames = __builder.GetFrames();
            foreach (var frame in frames.Array)
            {
                if(frame.AttributeValue is not null)
                {
                    var content = JsonContent.Create(frame.AttributeValue, frame.AttributeValue.GetType());
                    Console.WriteLine(content.ReadAsStringAsync().Result);
                }
            }
        };

        var share = new Dictionary<string, Func<object>>
        {
            { nameof(BxButton.Disabled), () => _disabled },
            { nameof(BxButton.Size), () => new EnumMix<BxButtonSize>(_size) },
            { nameof(BxButton.Kind), () => new EnumMix<BxButtonKind>(_kind) },
        };

        variants = new Dictionary<string, (Type type, string value, RenderFragment? renderFragment)>
        {
            { "button", (typeof(BxButton), "Button", button(share, (RenderFragment)(__builder =>
            {
                var sequence = 0;
                __builder.AddContent(sequence++, "Button");
            })) ) },
            { "buttonWithIcon", (typeof(BxButton), "Button with icon", button(share, (RenderFragment)(__builder =>
            {
                var sequence = 0;
                __builder.AddContent(sequence++, "Button");
                __builder.AddContent(sequence++, new MarkupString("<svg focusable='false' preserveAspectRatio='xMidYMid meet' xmlns='http://www.w3.org/2000/svg' fill='currentColor' aria-hidden='true' width='16' height='16' viewBox='0 0 32 32' class='bx--btn__icon'><path d='M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z'></path></svg>"));
            })) ) },
            { "iconOnly", (typeof(BxButton), "Icon only", button(new Dictionary<string, Func<object>>(share){ { nameof(BxButton.HasIconOnly), () => true } }, (RenderFragment)(__builder =>
            {
                var sequence = 0;
                __builder.AddContent(sequence++, new MarkupString("<svg focusable='false' preserveAspectRatio='xMidYMid meet' xmlns='http://www.w3.org/2000/svg' fill='currentColor' aria-hidden='true' width='16' height='16' viewBox='0 0 32 32' class='bx--btn__icon'><path d='M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z'></path></svg>"));
            })) ) }
        };

        base.OnInitialized();
    }

    /// <summary>
    /// Knob
    /// </summary>
    /// <param name="type"></param>
    /// <returns></returns>
    protected Dictionary<string, RenderFragment> Knob(Type type)
    {
        return new Dictionary<string, RenderFragment>
        {
            { "Modifiers", CreateBoolKnob("disabled", _disabled, __value => _disabled = __value) },
            { "Kind", CreateEnumKnob(_kind, __value => _kind = __value, new[]{ BxButtonKind.DangerGhost, BxButtonKind.DangerTertiary  }) },
            { "Size", CreateEnumKnob(_size, __value => _size = __value, new[]{ BxButtonSize.Small, BxButtonSize.Field }) }
        };
    }
}